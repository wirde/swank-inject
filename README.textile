h1. Injecting a Clojure REPL in an unmodified application 

"It's a hack, but it (kind of) works..."

A tool which lets you "inject" a Clojure REPL into a running Java application with remote debugging enabled. You are also able to specify one or more classes, one instance of each of those classes (preferably singletons) will be bound to the symbol  @swank-inject.aot/*ctx*@.

Uses Java Debug Interface (JDI) and a URLClassLoader to inject the code (http://download.oracle.com/javase/6/docs/jdk/api/jpda/jdi/index.html)

h2. Building

Built with https://github.com/technomancy/leiningen
> lein uberjar

h2. Usage

Start application in remote debug mode using JVM switches:
-Xdebug -Xrunjdwp:transport=dt_socket,address=7777,server=y,suspend=n 

Start injector:
java -cp swank-inject-0.0.1-SNAPSHOT-standalone.jar com.wirde.inject.Main -host localhost -port 7777 -url [URL to the standalone jar] -instances [qualified class names (singleton) of the instances you want available in the REPL]

Connect to the REPL using telnet (port 4711)

Your instances will be available in a sequence bound to @swank-inject.aot/*ctx*@

h2. Limitations

* Probably only works for HotSpot...
* Expects classes passed to be singletons, if not then the first found instance will be used.
* Will currently not work reliably if the class is loaded in multiple classloaders.
* Using Swank as the injected REPL does not work well for some reason. For now I am using clojure.contrib.server-socket/create-repl-server instead.

h2. TODO

* Handle singletons being loaded in multiple classloaders. How to select which branch to follow?
* Alternatively start a Swank REPL
